#!/usr/bin/python3
# -*- coding: utf-8 -*-

from sys import argv, stdout
from math import sqrt

# Do not modify this class, his default comportement is necessary for the program
class   BadArgumentError(Exception):
    def __init__(self, message, errors = "BadArgumentError"):
        super().__init__(message)
        self.errors = errors

class   Dannon():
    """ Definition of Dannon class """
    def __init__(self, argument):
        """ Initialise Dannon's instance and check little errors """
        self.fd = open(argument, "r")
        self.buff = self.fd.read().rstrip()
        self.buff = ' '.join(self.buff.split()).split(' ')
        if self.buff[0] == '':
            self.array = []
            self.element = 0
            return
        self.array = [self.buff[n] for n in range(len(self.buff))]
        self.array = [float(self.array[n]) for n in range(len(self.array))]
        self.element = len(self.array)

    def select(self):
        """ Perform a select sort algorythm """
        itteration, tmp = 0, [n for n in self.array]
        for n in range(len(tmp[:-1])):
            for i in range(n + 1, tmp.__len__()):
                itteration += 1; tmp[n], tmp[i] = tmp[i], tmp[n] if tmp[i] < tmp[n] else 0
        return itteration

    def insertion(self):
        """ Perform an insertion sort algorythm """
        itteration = 0
        tmp, sort = [n for n in self.array], [[n for n in self.array][0]]
        for n in range(1, len(tmp)):
            for i in range(sort.__len__()):
                itteration += 1
                if tmp[n] < sort[i]:
                    sort.insert(i, tmp[n])
                    break
            sort.append(tmp[n]) if i + 1 is sort.__len__() else None
        return itteration

    def bubble(self):
        """ Perform a bubble sort algorythm """
        itteration, tmp = 0, [n for n in self.array]
        for n in range(len(tmp[:-1]), 0, -1):
            for i in range(n):
                itteration += 1; tmp[i], tmp[i + 1] = tmp[i + 1], tmp[i] if tmp[i + 1] < tmp[i] else tmp[i]
        return itteration

    def fusion(self):
        """ Perform a merge sort algorythm algorythm """
        itteration, tmp = 0, [n for n in self.array]
        nb = int(len(tmp) / 2)
        def fusionCalcul(array1, array2, itteration):
            if len(array1) > 1:
                nb = int(len(array1) / 2)
                array1, itteration = fusionCalcul(array1[:nb], array1[nb:], itteration)
            if len(array2) > 1:
                nb = int(len(array2) / 2)
                array2, itteration = fusionCalcul(array2[:nb], array2[nb:], itteration)
            array, i, j = [], 0, 0
            while i < len(array1) and j < len(array2):
                if array1[i] < array2[j]:
                    array.append(array1[i])
                    i += 1
                else:
                    array.append(array2[j])
                    j += 1
                itteration += 1
            [array.append(n) for n in array1[i:]]
            [array.append(n) for n in array2[j:]]
            return array, itteration
        tmp, itteration = fusionCalcul(tmp[:nb], tmp[nb:], itteration)
        return itteration

    def quick(self):
        """ Perform a quicksort algorythm """
        def sort(tmp):
            """ Recursive function who perform a sort on list with 2 element or more """
            if len(tmp) is 0 or len(tmp) is 1:
                return 0
            itteration, pivot = 0, 0
            left, right = [], []
            for i in range(len(tmp)):
                if i is not pivot:
                    itteration += 1; (left.append(tmp[i])
                        if (tmp[i] < tmp[pivot]) else right.append(tmp[i]))
            return itteration + sort(right) + sort(left)
        tmp = [n for n in self.array]
        return sort(tmp)

    def computeValue(self):
        """ Calculate all printable value required by printValue method """
        if len(self.array) == 0:
            self.select_number, self.insertion_number = 0, 0
            self.bubble_number, self.fusion_number, self.quick_number = 0, 0, 0
        else:
            self.select_number = self.select()
            self.insertion_number = self.insertion()
            self.bubble_number = self.bubble()
            self.fusion_number = self.fusion()
            self.quick_number = self.quick()

    def printValue(self):
        """ Print all computed value into the tab """
        print("{} ".format(self.element) + "element" + ("s" if self.element > 1 else ""))
        print("select sort: {} ".format(self.select_number) + "comparison" + ("s" if self.element > 1 else ""))
        print("insertion sort: {} ".format(self.insertion_number) + "comparison" + ("s" if self.element > 1 else ""))
        print("bubble sort: {} ".format(self.bubble_number) + "comparison" + ("s" if self.element > 1 else ""))
        print("fusion sort: {} ".format(self.fusion_number) + "comparison" + ("s" if self.element > 1 else ""))
        print("quicksort: {} ".format(self.quick_number) + "comparison" + ("s" if self.element > 1 else ""))

def     manHelp():
    """ This function will print the help
    >>> manHelp()
    USAGE
    ./301dannon -h
    DESCRIPTION
        file file that contains the numbers to be sorted, seperated by spaces"""
    print("USAGE\n\t./301dannon -h\n\nDESCRIPTION\n\tfile\tfile that contains "
          "the numbers to be sorted, seperated by spaces")

# Do not put more information in this function, it's must be clearer as possible
def     main():
    """ Main function who perform program's core action like arguments resolution """
    if len(argv) is not 2:
        raise BadArgumentError("You must pass a valid file's name")
    if argv[1] == "-h":
        manHelp()
        exit(0)
    obj = Dannon(argv[1])
    obj.computeValue()
    obj.printValue()

# Don't touch at this except if u don't worry of problems
if __name__ == "__main__":
    try:
        main()
    except BaseException as error:
        stdout.write(str(type(error).__name__) + ": {}\n".format(error))
        exit(84)
    except SystemExit:
        exit(0)
